name: Build Android APK (Debug)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

concurrency:
  group: android-debug-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 35

    env:
      # Use fixed locations so we never rely on PATH magic
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      NODE_OPTIONS: --max_old_space_size=4096

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node with/without cache (works whether or not you have a lockfile)
      - name: Setup Node (with cache)
        if: ${{ hashFiles('**/package-lock.json','**/npm-shrinkwrap.json','**/yarn.lock') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Setup Node (no cache)
        if: ${{ hashFiles('**/package-lock.json','**/npm-shrinkwrap.json','**/yarn.lock') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Java (JDK 17)
        id: java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Bootstrap the SDK only (no packages yet)
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # Deterministic install of cmdline-tools + required packages
      - name: Install Android platform & build tools
        shell: bash
        run: |
          set -euxo pipefail
          CT="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"

          # Ensure newest cmdline-tools exists
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "cmdline-tools;latest" || true
          # After installing latest, re-point to the same path again (idempotent)
          CT="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"

          # Install platform + build-tools + platform-tools
          yes | "$CT" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "build-tools;34.0.0" \
            "platforms;android-34"

          # Accept licenses
          yes | "$CT" --sdk_root="$ANDROID_SDK_ROOT" --licenses

      # Install JS deps (ci when lockfile exists, otherwise install)
      - name: Install deps
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --no-audit --fund=false
          else
            npm install --no-audit --fund=false
          fi

      # Optional: ensure icons exist so PWA build doesn't miss them
      - name: Ensure PWA Icons
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick
          mkdir -p public/icons
          if [ ! -f public/icons/icon-192.png ] || [ ! -f public/icons/icon-512.png ]; then
            if [ -f public/icon.png ]; then SRC=public/icon.png; else SRC=/usr/share/icons/hicolor/512x512/apps/computer.png; fi
            convert "$SRC" -resize 192x192 public/icons/icon-192.png
            convert "$SRC" -resize 512x512 public/icons/icon-512.png
            cp public/icons/icon-192.png public/icons/maskable-192.png
            cp public/icons/icon-512.png public/icons/maskable-512.png
          fi

      - name: Build web bundle
        run: npm run build

      - name: Add & Sync Android platform (Capacitor)
        run: |
          npx --yes @capacitor/cli@latest cap add android || true
          npx --yes @capacitor/cli@latest cap sync android

      - name: Assemble debug APK
        working-directory: android
        run: ./gradlew --no-daemon assembleDebug

      - name: Zip APK
        run: |
          mkdir -p artifacts
          cp android/app/build/outputs/apk/debug/app-debug.apk artifacts/WishCraft-APK-debug.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: WishCraft-APK
          path: artifacts/WishCraft-APK-debug.apk
