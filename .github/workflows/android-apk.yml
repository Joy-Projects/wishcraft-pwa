name: Build Android APK (Debug)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 35

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node with cache if a lockfile exists, otherwise no-cache
      - name: Setup Node (with cache)
        if: ${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Setup Node (no cache)
        if: ${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Download / lay out commandline-tools and set ANDROID_SDK_ROOT
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # 1) Accept licenses deterministically
      - name: Accept Android licenses
        run: yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

      # 2) Install the exact packages we need with retries (handles "Computing updates...")
      - name: Install Android platform & build tools
        env:
          SDKMAN: ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager
          ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euxo pipefail
          for i in 1 2 3 4 5; do
            yes | "$SDKMAN" --sdk_root="$ROOT" \
              "platform-tools" \
              "platforms;android-34" \
              "build-tools;34.0.0" && break || {
              echo "sdkmanager failed (attempt $i). Retrying in $((i*20))sâ€¦"
              sleep $((i*20))
            }
          done
          "$ANDROID_SDK_ROOT/platform-tools/adb" --version || true

      # Install JS deps
      - name: Install deps
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --no-audit --fund=false
          else
            npm install --no-audit --fund=false
          fi

      # Make sure PWA icons exist so the build never fails on missing files
      - name: Ensure PWA icons
        run: |
          sudo apt-get update && sudo apt-get install -y imagemagick
          mkdir -p public/icons
          if [ ! -f public/icons/icon-192.png ] || [ ! -f public/icons/icon-512.png ]; then
            SRC=${SRC:-public/icon.png}
            if [ ! -f "$SRC" ]; then SRC=/usr/share/icons/hicolor/512x512/apps/computer.png; fi
            convert "$SRC" -resize 192x192 public/icons/icon-192.png
            convert "$SRC" -resize 512x512 public/icons/icon-512.png
            cp public/icons/icon-192.png public/icons/maskable-192.png
            cp public/icons/icon-512.png public/icons/maskable-512.png
          fi

      - name: Build web bundle
        run: npm run build

      - name: Add Android platform (Capacitor)
        run: |
          npx --yes @capacitor/cli@6 cap add android || true
          npx --yes @capacitor/cli@6 cap sync android

      - name: Assemble debug APK
        working-directory: android
        run: ./gradlew --no-daemon assembleDebug

      - name: Zip APK
        run: |
          mkdir -p artifacts
          cp android/app/build/outputs/apk/debug/app-debug.apk artifacts/WishCraft-APK-debug.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: WishCraft-APK
          path: artifacts/WishCraft-APK-debug.apk
