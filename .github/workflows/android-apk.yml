name: Build Android APK (Debug)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 35

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node with cache if a lockfile exists, otherwise no-cache
      - name: Setup Node (with cache)
        if: ${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Setup Node (no cache)
        if: ${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Download / lay out commandline-tools and set ANDROID_SDK_ROOT
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # 1) Accept licenses deterministically
      - name: Accept Android licenses
        run: yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

      # 2) Install the exact packages we need with retries (handles "Computing updates...")
      - name: Install Android platform & build tools
        env:
          SDKMAN: ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin/sdkmanager
          ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euxo pipefail
          for i in 1 2 3 4 5; do
            yes | "$SDKMAN" --sdk_root="$ROOT" \
              "platform-tools" \
              "platforms;android-34" \
              "build-tools;34.0.0" && break || {
              echo "sdkmanager failed (attempt $i). Retrying in $((i*20))sâ€¦"
              sleep $((i*20))
            }
          done
          "$ANDROID_SDK_ROOT/platform-tools/adb" --version || true

      # Install JS deps
      - name: Install deps
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci --no-audit --fund=false
          else
            npm install --no-audit --fund=false
          fi

      # Make sure PWA icons exist so the build never fails on missing files
      - name: Ensure PWA Icons
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y imagemagick

          mkdir -p public/icons

          # Pick a source icon if you already committed one.
          if [ -f public/icon.png ]; then
            SRC=public/icon.png
          elif [ -f public/icons/icon-512.png ]; then
            SRC=public/icons/icon-512.png
          else
            echo "No source icon found; creating a placeholder."
            # Simple solid square placeholder (no fonts needed).
            convert -size 512x512 xc:"#4f46e5" public/icon-source.png
            SRC=public/icon-source.png
          fi

          # Generate the sizes your manifest references
          convert "$SRC" -resize 192x192 public/icons/icon-192.png
          convert "$SRC" -resize 512x512 public/icons/icon-512.png
          # maskable copies (works for now even if not truly maskable)
          cp public/icons/icon-192.png public/icons/maskable-192.png
          cp public/icons/icon-512.png public/icons/maskable-512.png


      - name: Build web bundle
        run: npm run build

      # Make sure Capacitor CLI and the Android platform package exist in CI
      - name: Ensure Capacitor toolchain
        run: |
          # CLI should already be in devDependencies, but ensure it anyway
          if ! npx --yes --package=@capacitor/cli@6 cap --version >/dev/null 2>&1; then
            npm i -D @capacitor/cli@6
          fi
          # Ensure the Android platform package is present (idempotent)
          if ! npm ls @capacitor/android >/dev/null 2>&1; then
            npm i -D @capacitor/android@6
          fi

      - name: Add Android platform (Capacitor)
        run: |
          # Use the binary directly via npx (this avoids the "Unknown command: cap" problem)
          npx cap add android || true
          npx cap sync android
          # make sure the gradle wrapper is executable
          chmod +x android/gradlew

      - name: Assemble debug APK
        working-directory: android
        run: ./gradlew --no-daemon assembleDebug

      - name: Zip APK
        run: |
          mkdir -p artifacts
          cp android/app/build/outputs/apk/debug/app-debug.apk artifacts/WishCraft-APK-debug.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: WishCraft-APK
          path: artifacts/WishCraft-APK-debug.apk
